import r from"fs";import c from"path";const d=c.resolve(),l=t=>new Promise((e,s)=>{r.readdir(t,(i,o)=>{i?s(i):e(o)})}),f=t=>new Promise(e=>{r.statSync(t).isFile()?e(!0):e()}),y=t=>new Promise(e=>{r.stat(t,(s,i)=>{!s&&i.isDirectory()?e(!0):e()})}),F=t=>{try{return r.accessSync(t,r.constants.F_OK),t}catch{return}},p=t=>{let e=t.split(/[\\/]/),s="";for(let i of e)if(i){s+=`${i}/`;try{r.accessSync(s,r.constants.F_OK)}catch{r.mkdirSync(s,n=>{n&&console.log(`Create path = '${s}' fail. 
${n.message}`)})}}},m=t=>{t=c.resolve(t);let e=[];if(r.existsSync(t)){e=r.readdirSync(t);for(let s of e){let i=c.join(t,"/"+s);r.statSync(i).isDirectory()?m(i):r.unlinkSync(i)}r.rmdirSync(t)}};let w=(t,e)=>new Promise((s,i)=>{r.readFile(t,(o,n)=>{o?i(o):r.writeFile(e,n,a=>{a?i(a):s()})})});const S=async(t,e)=>{const s=await l(t);p(e);for(const i of s){const o=c.join(t,i),n=c.join(e,i);await f(o)?await w(o,n):await y(o)&&await S(o,n)}};export{S as copyDir,w as copyFile,m as delDirsSync,F as fileok,l as getFiles,y as isDir,f as isFile,p as mkdirsSync,d as root};
